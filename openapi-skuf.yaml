openapi: 3.0.1
info:
  title: Skuf API
  description: API documentation for Skuf services
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local server
  - url: https://skuf.cz
    description: Production server
paths:
  /cleanings:
    post:
      summary: Create a new cleaning
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CleaningDTO'
      responses:
        '201':
          description: Cleaning created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleaningDTO'
    get:
      summary: Get all cleanings
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of cleanings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CleaningDTO'
  /cleanings/{id}:
    get:
      summary: Get cleaning by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cleaning found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleaningDTO'
        '404':
          description: Cleaning not found
    put:
      summary: Update a cleaning
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CleaningDTO'
      responses:
        '200':
          description: Cleaning updated
    delete:
      summary: Delete a cleaning
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Cleaning deleted
  /cleaning-types:
    post:
      summary: Create a new cleaning type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CleaningTypeDTO'
      responses:
        '201':
          description: Cleaning type created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleaningTypeDTO'
    get:
      summary: Get all cleaning types
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of cleaning types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CleaningTypeDTO'
  /cleaning-types/{id}:
    get:
      summary: Get cleaning type by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cleaning type found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleaningTypeDTO'
        '404':
          description: Cleaning type not found
    put:
      summary: Update a cleaning type
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CleaningTypeDTO'
      responses:
        '200':
          description: Cleaning type updated
    delete:
      summary: Delete a cleaning type
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Cleaning type deleted
  /companies:
    post:
      summary: Create a new company
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyDTO'
      responses:
        '201':
          description: Company created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDTO'
    get:
      summary: Get all companies
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanyDTO'
  /companies/{id}:
    get:
      summary: Get company by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Company found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDTO'
        '404':
          description: Company not found
    put:
      summary: Update a company
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyDTO'
      responses:
        '200':
          description: Company updated
    delete:
      summary: Delete a company
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Company deleted
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
    get:
      summary: Get all users
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
  /users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: User not found
    put:
      summary: Update a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: User updated
    delete:
      summary: Delete a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
  /emails:
    post:
      summary: Create a new email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailDTO'
      responses:
        '201':
          description: Email created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailDTO'
    get:
      summary: Get all emails
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of emails
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmailDTO'
  /emails/{id}:
    get:
      summary: Get email by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailDTO'
        '404':
          description: Email not found
    put:
      summary: Update an email
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailDTO'
      responses:
        '200':
          description: Email updated
    delete:
      summary: Delete an email
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Email deleted
  /notifications:
    post:
      summary: Create a new notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationDTO'
      responses:
        '201':
          description: Notification created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDTO'
    get:
      summary: Get all notifications
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDTO'
  /notifications/{id}:
    get:
      summary: Get notification by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDTO'
        '404':
          description: Notification not found
    put:
      summary: Update a notification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationDTO'
      responses:
        '200':
          description: Notification updated
    delete:
      summary: Delete a notification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Notification deleted
components:
  schemas:
    CleaningDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: integer
        startdatetime:
          type: string
          format: date-time
        enddatetime:
          type: string
          format: date-time
        cleaner:
          type: string
          format: uuid
        consumer:
          type: string
          format: uuid
        ctype:
          type: string
    CleaningTypeDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    CompanyDTO:
      type: object
      properties:
        managers:
          type: array
          items:
            type: string
            format: uuid
        workers:
          type: array
          items:
            type: string
            format: uuid
        administrators:
          type: array
          items:
            type: string
            format: uuid
        name:
          type: string
        ico:
          type: string
        services:
          type: string
          format: uuid
    UserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fname:
          type: string
        lname:
          type: string
        pswd:
          type: string
        email:
          type: string
        rating:
          type: number
          format: double
        socials:
          type: string
        phone:
          type: string
        address:
          type: string
    EmailDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        sender:
          type: string
          format: uuid
        recipient:
          type: string
          format: uuid
        subject:
          type: string
        body:
          type: string
    NotificationDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        content:
          type: string
        title:
          type: string
        actionTime:
          type: string
          format: date-time
        recipient:
          type: string
          format: uuid
        sender:
          type: string
        userId:
          type: string
          format: uuid
